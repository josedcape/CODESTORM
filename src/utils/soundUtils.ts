/**
 * Utilidades para reproducir sonidos en la aplicaci√≥n
 */

/**
 * Reproduce un archivo de sonido con manejo mejorado de permisos
 * @param soundFile - Nombre del archivo de sonido (ej: 'futur.mp3')
 * @param volume - Volumen del sonido (0.0 a 1.0)
 */
export const playSound = (soundFile: string, volume: number = 0.5): Promise<boolean> => {
  return new Promise((resolve) => {
    try {
      console.log(`üîä Intentando reproducir sonido: ${soundFile}`);

      const audio = new Audio(`/${soundFile}`);
      audio.volume = Math.max(0, Math.min(1, volume));

      // Configurar eventos del audio
      audio.addEventListener('loadstart', () => {
        console.log(`üì• Iniciando carga de ${soundFile}`);
      });

      audio.addEventListener('canplay', () => {
        console.log(`‚úÖ Audio ${soundFile} listo para reproducir`);
      });

      audio.addEventListener('ended', () => {
        console.log(`üéµ Reproducci√≥n de ${soundFile} completada`);
        resolve(true);
      });

      audio.addEventListener('error', (error) => {
        console.warn(`‚ùå Error al cargar ${soundFile}:`, error);
        resolve(false);
      });

      // Intentar reproducir
      const playPromise = audio.play();

      if (playPromise !== undefined) {
        playPromise
          .then(() => {
            console.log(`üé∂ Sonido ${soundFile} reproduci√©ndose exitosamente`);
          })
          .catch(error => {
            console.warn(`‚ö†Ô∏è No se pudo reproducir ${soundFile}:`, error.message);

            // Intentar reproducir despu√©s de interacci√≥n del usuario
            if (error.name === 'NotAllowedError') {
              console.log('üîí Reproducci√≥n bloqueada por pol√≠tica del navegador. Esperando interacci√≥n del usuario...');

              // Crear funci√≥n para reproducir despu√©s de click
              const playAfterInteraction = () => {
                audio.play()
                  .then(() => {
                    console.log(`üé∂ Sonido ${soundFile} reproducido despu√©s de interacci√≥n`);
                    resolve(true);
                  })
                  .catch(() => resolve(false));

                // Remover listener despu√©s del primer uso
                document.removeEventListener('click', playAfterInteraction);
                document.removeEventListener('keydown', playAfterInteraction);
              };

              // Agregar listeners para interacci√≥n
              document.addEventListener('click', playAfterInteraction, { once: true });
              document.addEventListener('keydown', playAfterInteraction, { once: true });
            }

            resolve(false);
          });
      }

    } catch (error) {
      console.warn(`üí• Error cr√≠tico al crear audio para ${soundFile}:`, error);
      resolve(false);
    }
  });
};

/**
 * Reproduce el sonido de √©xito (futur.mp3) con logging mejorado
 */
export const playSuccessSound = async (): Promise<boolean> => {
  console.log('üéâ Reproduciendo sonido de √©xito...');
  const result = await playSound('futur.mp3', 0.6);

  if (result) {
    console.log('‚úÖ Sonido de √©xito reproducido correctamente');
  } else {
    console.warn('‚ö†Ô∏è No se pudo reproducir el sonido de √©xito');
  }

  return result;
};

/**
 * Reproduce el sonido de trueno
 */
export const playThunderSound = async (): Promise<boolean> => {
  console.log('‚ö° Reproduciendo sonido de trueno...');
  return await playSound('trueno.mp3', 0.4);
};

/**
 * Precargar un archivo de sonido para reproducci√≥n m√°s r√°pida
 * @param soundFile - Nombre del archivo de sonido
 */
export const preloadSound = (soundFile: string): void => {
  try {
    const audio = new Audio(`/${soundFile}`);
    audio.preload = 'auto';
    console.log(`üéµ Sonido precargado: ${soundFile}`);
  } catch (error) {
    console.warn('Error al precargar sonido:', error);
  }
};

/**
 * Precargar todos los sonidos de la aplicaci√≥n
 */
export const preloadAllSounds = (): void => {
  console.log('üéµ Precargando todos los sonidos...');
  preloadSound('futur.mp3');
  preloadSound('trueno.mp3');

  // Habilitar audio despu√©s de la primera interacci√≥n
  enableAudioAfterInteraction();
};

/**
 * Habilita el audio despu√©s de la primera interacci√≥n del usuario
 */
export const enableAudioAfterInteraction = (): void => {
  let audioEnabled = false;

  const enableAudio = () => {
    if (audioEnabled) return;

    console.log('üîì Habilitando audio despu√©s de interacci√≥n del usuario');

    // Crear y reproducir un audio silencioso para "desbloquear" el audio
    const silentAudio = new Audio('data:audio/wav;base64,UklGRnoGAABXQVZFZm10IBAAAAABAAEAQB8AAEAfAAABAAgAZGF0YQoGAACBhYqFbF1fdJivrJBhNjVgodDbq2EcBj+a2/LDciUFLIHO8tiJNwgZaLvt559NEAxQp+PwtmMcBjiR1/LMeSwFJHfH8N2QQAoUXrTp66hVFApGn+DyvmwhBSuBzvLZiTYIG2m98OScTgwOUarm7blmGgU7k9n1unEiBC13yO/eizEIHWq+8+OWT');
    silentAudio.volume = 0.01;

    silentAudio.play()
      .then(() => {
        console.log('‚úÖ Audio habilitado exitosamente');
        audioEnabled = true;
      })
      .catch(() => {
        console.log('‚ö†Ô∏è No se pudo habilitar el audio autom√°ticamente');
      });
  };

  // Agregar listeners para diferentes tipos de interacci√≥n
  const events = ['click', 'touchstart', 'keydown'];

  events.forEach(event => {
    document.addEventListener(event, enableAudio, { once: true, passive: true });
  });

  console.log('üéß Listeners de audio configurados para primera interacci√≥n');
};
