import { tryWithFallback } from './ai';
import { EnhancedAPIService } from './EnhancedAPIService';
import { generateUniqueId } from '../utils/idGenerator';
import { WebPagePlan } from '../components/webbuilder/UnifiedPlanningInterface';
import { getDistributedAgentConfig } from '../config/claudeModels';

export interface PlanningState {
  currentPhase: 'input' | 'enhancement' | 'planning' | 'approval' | 'coordination' | 'generation' | 'completed';
  userInstruction: string;
  enhancedPrompt?: string;
  plan?: WebPagePlan;
  isProcessing: boolean;
  error?: string;
  coordinationProgress?: {
    stage: string;
    progress: number;
    currentAgent: string;
  };
  generatedFiles?: {
    html: string;
    css: string;
    js: string;
  };
}

export interface PlanningCallbacks {
  onStateChange: (state: PlanningState) => void;
  onProgress: (message: string, progress: number) => void;
  onError: (error: string) => void;
  onComplete: (files: Array<{ name: string; content: string; type: string }>) => void;
}

export class UnifiedPlanningService {
  private state: PlanningState;
  private callbacks: PlanningCallbacks;
  private apiService = EnhancedAPIService.getInstance();

  constructor(callbacks: PlanningCallbacks) {
    this.callbacks = callbacks;
    this.state = {
      currentPhase: 'input',
      userInstruction: '',
      isProcessing: false
    };
  }

  public getState(): PlanningState {
    return { ...this.state };
  }

  public updateInstruction(instruction: string): void {
    this.state.userInstruction = instruction;
    this.emitStateChange();
  }

  public async startPlanning(): Promise<void> {
    if (!this.state.userInstruction.trim()) {
      throw new Error('La instrucci√≥n no puede estar vac√≠a');
    }

    this.state.currentPhase = 'enhancement';
    this.state.isProcessing = false;
    this.emitStateChange();
  }

  public async startDirectPlanning(): Promise<void> {
    if (!this.state.userInstruction.trim()) {
      throw new Error('La instrucci√≥n no puede estar vac√≠a');
    }

    this.state.currentPhase = 'planning';
    this.state.isProcessing = true;
    this.emitStateChange();
    await this.generatePlan();
  }

  public goToEnhancement(): void {
    this.state.currentPhase = 'enhancement';
    this.state.isProcessing = false;
    this.emitStateChange();
  }

  public async enhancePrompt(): Promise<{ success: boolean; enhancedPrompt?: string; error?: string }> {
    try {
      // Validar que hay instrucci√≥n del usuario
      if (!this.state.userInstruction || this.state.userInstruction.trim().length < 5) {
        throw new Error('La instrucci√≥n del usuario es demasiado corta para mejorar');
      }

      this.state.isProcessing = true;
      this.emitStateChange();
      this.callbacks.onProgress('Mejorando descripci√≥n con IA...', 25);

      console.log('‚ú® Iniciando mejora de prompt para:', this.state.userInstruction);

      const enhancementPrompt = `
Como experto en desarrollo web y UX, mejora la siguiente descripci√≥n de p√°gina web para hacerla m√°s espec√≠fica, detallada y t√©cnicamente precisa:

DESCRIPCI√ìN ORIGINAL: "${this.state.userInstruction}"

INSTRUCCIONES PARA MEJORA:
1. MANT√âN LA ESENCIA: Conserva el prop√≥sito y tema principal de la descripci√≥n original
2. AGREGA ESPECIFICIDAD: Incluye detalles concretos sobre el contenido y funcionalidades
3. DEFINE ESTRUCTURA: Especifica secciones, p√°ginas y elementos necesarios
4. INCLUYE FUNCIONALIDADES: Detalla caracter√≠sticas interactivas y t√©cnicas
5. ESPECIFICA DISE√ëO: Menciona estilo visual, colores, tipograf√≠a apropiados
6. DEFINE AUDIENCIA: Clarifica el p√∫blico objetivo y sus necesidades
7. A√ëADE CONTEXTO: Incluye informaci√≥n sobre el prop√≥sito comercial o personal

FORMATO DE RESPUESTA:
Proporciona una descripci√≥n mejorada que sea:
- Espec√≠fica y detallada (m√≠nimo 100 palabras)
- T√©cnicamente viable para desarrollo web
- Orientada a resultados concretos
- Clara en objetivos y funcionalidades
- Completa en alcance y estructura
- Profesional y bien estructurada

EJEMPLO DE MEJORA:
Original: "Una p√°gina para mi negocio"
Mejorada: "Una p√°gina web profesional para [tipo de negocio] que incluya una secci√≥n hero con llamada a la acci√≥n, galer√≠a de productos/servicios, testimonios de clientes, informaci√≥n de contacto con formulario, y dise√±o responsive moderno con colores corporativos que transmita confianza y profesionalismo al p√∫blico objetivo de [audiencia espec√≠fica]."

IMPORTANTE:
- La descripci√≥n mejorada debe ser una versi√≥n expandida y m√°s precisa de la original
- NO cambies el tema o prop√≥sito principal
- Mant√©n el tono apropiado para el tipo de proyecto
- Incluye detalles t√©cnicos relevantes

Responde √öNICAMENTE con la descripci√≥n mejorada, sin explicaciones adicionales.
`;

      // Usar configuraci√≥n distribuida para PromptEnhancementAgent
      const agentConfig = getDistributedAgentConfig('PromptEnhancementAgent');
      console.log(`‚ú® Usando configuraci√≥n: ${agentConfig.model.id} con ${agentConfig.maxTokens} tokens`);

      const response = await this.apiService.sendMessage(enhancementPrompt, {
        agentName: 'PromptEnhancementAgent',
        maxTokens: agentConfig.maxTokens,
        temperature: agentConfig.temperature,
        systemPrompt: 'Eres un experto en desarrollo web y UX especializado en mejorar descripciones de proyectos web. Tu trabajo es expandir y detallar las ideas del usuario manteniendo su esencia original.'
      });

      if (!response.success || !response.data) {
        throw new Error(`Error al mejorar prompt: ${response.error || 'Respuesta vac√≠a del servicio de IA'}`);
      }

      console.log('‚ú® Respuesta recibida del PromptEnhancementAgent');

      // Extraer y validar contenido mejorado
      const enhancedContent = response.data.trim();

      if (!enhancedContent || enhancedContent.length < 20) {
        throw new Error('La respuesta del agente de mejora es demasiado corta o vac√≠a');
      }

      // Validar que la mejora es sustancialmente diferente del original
      if (enhancedContent.toLowerCase() === this.state.userInstruction.toLowerCase()) {
        console.warn('‚ú® La mejora es id√©ntica al original, usando de todas formas');
      }

      this.state.enhancedPrompt = enhancedContent;
      this.state.isProcessing = false;
      this.emitStateChange();
      this.callbacks.onProgress('Descripci√≥n mejorada exitosamente', 100);

      console.log('‚ú® Prompt mejorado exitosamente:');
      console.log('‚ú® Original:', this.state.userInstruction);
      console.log('‚ú® Mejorado:', this.state.enhancedPrompt);

      return { success: true, enhancedPrompt: this.state.enhancedPrompt };

    } catch (error) {
      console.error('‚ú® Error en enhancePrompt:', error);

      // Intentar fallback con mejora b√°sica local
      try {
        console.log('‚ú® Intentando fallback con mejora b√°sica...');
        const basicEnhancement = this.generateBasicEnhancement(this.state.userInstruction);

        if (basicEnhancement && basicEnhancement.length > this.state.userInstruction.length) {
          this.state.enhancedPrompt = basicEnhancement;
          this.state.isProcessing = false;
          this.emitStateChange();
          this.callbacks.onProgress('Descripci√≥n mejorada con fallback b√°sico', 100);

          console.log('‚ú® Fallback exitoso:');
          console.log('‚ú® Original:', this.state.userInstruction);
          console.log('‚ú® Mejorado (fallback):', this.state.enhancedPrompt);

          return { success: true, enhancedPrompt: this.state.enhancedPrompt };
        }
      } catch (fallbackError) {
        console.error('‚ú® Error en fallback:', fallbackError);
      }

      this.state.isProcessing = false;
      this.state.error = error instanceof Error ? error.message : 'Error desconocido al mejorar el prompt';
      this.emitStateChange();
      this.callbacks.onError(`${this.state.error}. Puedes continuar con la descripci√≥n original usando "Omitir Mejora".`);

      return { success: false, error: this.state.error };
    }
  }

  public async skipEnhancement(): Promise<void> {
    this.state.currentPhase = 'planning';
    this.state.isProcessing = true;
    this.emitStateChange();
    await this.generatePlan();
  }

  public async useEnhancedPrompt(): Promise<void> {
    if (!this.state.enhancedPrompt) {
      throw new Error('No hay prompt mejorado disponible');
    }
    this.state.userInstruction = this.state.enhancedPrompt;
    this.state.currentPhase = 'planning';
    this.state.isProcessing = true;
    this.emitStateChange();
    await this.generatePlan();
  }

  public async useOriginalPrompt(): Promise<void> {
    this.state.currentPhase = 'planning';
    this.state.isProcessing = true;
    this.emitStateChange();
    await this.generatePlan();
  }

  private async generatePlan(): Promise<void> {
    try {
      this.callbacks.onProgress('Generando plan detallado...', 60);

      // Usar la instrucci√≥n espec√≠fica del usuario (mejorada si existe)
      const userInstruction = this.state.enhancedPrompt || this.state.userInstruction;
      console.log('üìã Generando plan espec√≠fico para:', userInstruction);

      const planPrompt = `
Crea un plan detallado para desarrollar ESPEC√çFICAMENTE la siguiente p√°gina web del usuario:

INSTRUCCI√ìN ESPEC√çFICA DEL USUARIO: ${userInstruction}

IMPORTANTE: El plan debe ser ESPEC√çFICO para esta instrucci√≥n, no gen√©rico. Analiza cuidadosamente lo que el usuario quiere y crea un plan personalizado.

Analiza la instrucci√≥n del usuario y genera un plan estructurado en formato JSON que sea ESPEC√çFICO para su solicitud:

ESTRUCTURA JSON REQUERIDA:
{
  "title": "T√≠tulo espec√≠fico basado en la instrucci√≥n del usuario",
  "description": "Descripci√≥n detallada del proyecto espec√≠fico",
  "structure": [
    {
      "section": "Nombre de secci√≥n espec√≠fica",
      "description": "Descripci√≥n espec√≠fica de esta secci√≥n",
      "content": ["Contenido espec√≠fico 1", "Contenido espec√≠fico 2", "etc"]
    }
  ],
  "design": {
    "colorScheme": "Esquema de colores apropiado para el proyecto espec√≠fico",
    "typography": "Tipograf√≠a apropiada para el tipo de proyecto",
    "layout": "Layout espec√≠fico para las necesidades del proyecto",
    "style": "Estilo visual apropiado para el contexto"
  },
  "functionality": ["Funcionalidad espec√≠fica 1", "Funcionalidad espec√≠fica 2"],
  "estimatedComplexity": "low|medium|high"
}

REQUISITOS ESPEC√çFICOS:
1. El t√≠tulo debe reflejar exactamente lo que el usuario pidi√≥
2. Las secciones deben ser apropiadas para el tipo de p√°gina solicitada
3. El contenido debe ser espec√≠fico al contexto (no gen√©rico)
4. El dise√±o debe ser apropiado para el prop√≥sito de la p√°gina
5. Las funcionalidades deben ser relevantes para el proyecto espec√≠fico

IMPORTANTE: NO generes un plan gen√©rico. Analiza la instrucci√≥n del usuario y crea un plan personalizado.

Responde √öNICAMENTE con el JSON v√°lido, sin texto adicional.
`;

      // Usar EnhancedAPIService para mayor robustez
      const response = await this.apiService.sendMessage(planPrompt, {
        agentName: 'PlanningAgent',
        maxTokens: 3072,
        temperature: 0.8,
        systemPrompt: 'Eres un experto en planificaci√≥n de proyectos web especializado en crear planes detallados y espec√≠ficos basados en las necesidades del usuario.'
      });

      if (!response.success || !response.data) {
        throw new Error(`Error al generar plan: ${response.error}`);
      }

      const plan = this.parseWebPagePlan(response.data);

      this.state.plan = plan;
      this.state.currentPhase = 'approval';
      this.state.isProcessing = false;
      this.emitStateChange();
      this.callbacks.onProgress('Plan generado exitosamente', 80);

    } catch (error) {
      this.state.isProcessing = false;
      this.state.error = error instanceof Error ? error.message : 'Error al generar el plan';
      this.emitStateChange();
      this.callbacks.onError(this.state.error);
    }
  }

  private parseWebPagePlan(content: string): WebPagePlan {
    try {
      // Try to extract JSON from the response
      const jsonMatch = content.match(/\{[\s\S]*\}/);
      if (jsonMatch) {
        const parsed = JSON.parse(jsonMatch[0]);
        return {
          id: generateUniqueId('plan'),
          title: parsed.title || 'P√°gina Web',
          description: parsed.description || 'P√°gina web generada autom√°ticamente',
          structure: parsed.structure || [],
          design: parsed.design || {
            colorScheme: 'Moderno y profesional',
            typography: 'Sans-serif limpia',
            layout: 'Responsive',
            style: 'Minimalista'
          },
          functionality: parsed.functionality || [],
          estimatedComplexity: parsed.estimatedComplexity || 'medium'
        };
      }
    } catch (error) {
      console.error('Error parsing web page plan:', error);
    }

    // Fallback plan if parsing fails - usar instrucci√≥n del usuario
    const userInstruction = this.state.enhancedPrompt || this.state.userInstruction;
    return {
      id: generateUniqueId('plan'),
      title: userInstruction.length > 50 ? userInstruction.substring(0, 50) + '...' : userInstruction,
      description: `P√°gina web espec√≠fica: ${userInstruction}`,
      structure: [
        {
          id: generateUniqueId('section'),
          section: 'Header',
          description: 'Encabezado con navegaci√≥n',
          content: ['Logo', 'Men√∫ de navegaci√≥n']
        },
        {
          id: generateUniqueId('section'),
          section: 'Hero',
          description: 'Secci√≥n principal de impacto',
          content: ['T√≠tulo principal', 'Subt√≠tulo', 'Call-to-action']
        },
        {
          id: generateUniqueId('section'),
          section: 'Content',
          description: 'Contenido principal',
          content: ['Informaci√≥n relevante', 'Caracter√≠sticas']
        },
        {
          id: generateUniqueId('section'),
          section: 'Footer',
          description: 'Pie de p√°gina',
          content: ['Informaci√≥n de contacto', 'Enlaces adicionales']
        }
      ],
      design: {
        colorScheme: 'Azul y blanco profesional',
        typography: 'Sans-serif moderna',
        layout: 'Responsive y centrado',
        style: 'Limpio y minimalista'
      },
      functionality: ['Navegaci√≥n suave', 'Dise√±o responsive', 'Animaciones CSS'],
      estimatedComplexity: 'medium'
    };
  }

  public async approvePlan(feedback?: string): Promise<void> {
    if (!this.state.plan) {
      throw new Error('No hay plan disponible para aprobar');
    }

    this.state.currentPhase = 'coordination';
    this.state.isProcessing = true;
    this.emitStateChange();
    await this.coordinateAgents();
  }

  public async rejectPlan(feedback: string): Promise<void> {
    this.state.currentPhase = 'input';
    this.state.plan = undefined;
    this.state.enhancedPrompt = undefined;
    this.state.isProcessing = false;
    this.state.error = `Plan rechazado: ${feedback}`;
    this.emitStateChange();
    this.callbacks.onError(`Plan rechazado. ${feedback}`);
  }

  private async coordinateAgents(): Promise<void> {
    try {
      if (!this.state.plan) {
        throw new Error('No hay plan disponible');
      }

      const plan = this.state.plan;

      // Phase 1: Design Architect Agent
      this.state.coordinationProgress = {
        stage: 'Dise√±o y Estilos',
        progress: 25,
        currentAgent: 'Design Architect Agent'
      };
      this.emitStateChange();
      this.callbacks.onProgress('Coordinando agentes especializados - Generando dise√±o...', 25);

      console.log('üé® Iniciando Design Architect Agent...');
      const cssContent = await this.generateCSSWithDesignAgent(plan);
      console.log('üé® CSS generado:', cssContent.length, 'caracteres');
      console.log('üé® Primeras 200 caracteres del CSS:', cssContent.substring(0, 200));

      // Phase 2: Code Constructor Agent
      this.state.coordinationProgress = {
        stage: 'Estructura HTML',
        progress: 50,
        currentAgent: 'Code Constructor Agent'
      };
      this.emitStateChange();
      this.callbacks.onProgress('Generando estructura HTML...', 50);

      console.log('üèóÔ∏è Iniciando Code Constructor Agent...');
      const htmlContent = await this.generateHTMLWithCodeAgent(plan);
      console.log('üèóÔ∏è HTML generado:', htmlContent.length, 'caracteres');
      console.log('üèóÔ∏è Primeras 200 caracteres del HTML:', htmlContent.substring(0, 200));

      // Phase 3: JavaScript Enhancement
      this.state.coordinationProgress = {
        stage: 'Funcionalidad JavaScript',
        progress: 60,
        currentAgent: 'JavaScript Agent'
      };
      this.emitStateChange();
      this.callbacks.onProgress('A√±adiendo funcionalidad JavaScript...', 60);

      console.log('‚ö° Iniciando JavaScript Agent...');
      const jsContent = await this.generateJavaScript(plan);
      console.log('‚ö° JavaScript generado:', jsContent.length, 'caracteres');
      console.log('‚ö° Primeras 200 caracteres del JS:', jsContent.substring(0, 200));

      // Phase 4: GIFT Agent (Graphics, Icons, Features & Transitions)
      this.state.coordinationProgress = {
        stage: 'Elementos Visuales y Animaciones',
        progress: 70,
        currentAgent: 'GIFT Agent'
      };
      this.emitStateChange();
      this.callbacks.onProgress('Generando iconos, animaciones y elementos visuales...', 70);

      console.log('üé® Iniciando GIFT Agent (Graphics, Icons, Features & Transitions)...');
      const { enhancedHTML, enhancedCSS } = await this.generateVisualEnhancements(plan, htmlContent, cssContent);
      console.log('üé® HTML enriquecido:', enhancedHTML.length, 'caracteres');
      console.log('üé® CSS enriquecido:', enhancedCSS.length, 'caracteres');

      // Phase 5: Production Agent (Quality Control)
      this.state.coordinationProgress = {
        stage: 'Control de Calidad y Optimizaci√≥n',
        progress: 85,
        currentAgent: 'Production Agent'
      };
      this.emitStateChange();
      this.callbacks.onProgress('Analizando calidad y optimizando c√≥digo final...', 85);

      console.log('üîç Iniciando Production Agent (Control de Calidad)...');
      const { finalHTML, finalCSS, finalJS, qualityReport } = await this.performQualityControl(plan, enhancedHTML, enhancedCSS, jsContent);
      console.log('üîç An√°lisis de calidad completado');
      console.log('üîç Reporte de calidad:', qualityReport);

      // Phase 6: Final Integration
      this.state.coordinationProgress = {
        stage: 'Integraci√≥n Final',
        progress: 100,
        currentAgent: 'Coordinator'
      };
      this.emitStateChange();
      this.callbacks.onProgress('Integrando archivos finales...', 100);

      const files = [
        { name: 'index.html', content: finalHTML, type: 'html' },
        { name: 'styles.css', content: finalCSS, type: 'css' },
        { name: 'script.js', content: finalJS, type: 'javascript' }
      ];

      console.log('üìÅ Archivos generados:');
      files.forEach(file => {
        console.log(`üìÑ ${file.name}: ${file.content.length} caracteres`);
        console.log(`üìÑ ${file.name} preview:`, file.content.substring(0, 100) + '...');
      });

      // Guardar archivos generados en el estado para la vista previa
      this.state.generatedFiles = {
        html: finalHTML,
        css: finalCSS,
        js: finalJS
      };

      this.state.currentPhase = 'completed';
      this.state.isProcessing = false;
      this.state.coordinationProgress = undefined;
      this.emitStateChange();
      this.callbacks.onComplete(files);

    } catch (error) {
      this.state.isProcessing = false;
      this.state.error = error instanceof Error ? error.message : 'Error en coordinaci√≥n de agentes';
      this.emitStateChange();
      this.callbacks.onError(this.state.error);
    }
  }

  private async generateCSSWithDesignAgent(plan: WebPagePlan): Promise<string> {
    console.log('üé® Design Architect Agent - Intentando generar CSS...');

    try {
      const designPrompt = `
Como Design Architect Agent especializado, crea un archivo CSS COMPLETO y FUNCIONAL basado en este plan:

PROYECTO: ${plan.title}
DESCRIPCI√ìN: ${plan.description}
DISE√ëO ESPECIFICADO: ${JSON.stringify(plan.design, null, 2)}
ESTRUCTURA DE SECCIONES: ${JSON.stringify(plan.structure, null, 2)}

INSTRUCCIONES CR√çTICAS:
1. Genera CSS COMPLETO que funcione inmediatamente
2. Incluye TODOS los estilos necesarios para cada secci√≥n del plan
3. Crea un sistema de dise√±o cohesivo y profesional apropiado para "${plan.title}"
4. Implementa colores y tipograf√≠a espec√≠ficos para el tipo de proyecto
5. Dise√±a layouts responsive con Grid y Flexbox
6. A√±ade animaciones y transiciones suaves
7. Implementa hover effects y micro-interacciones
8. Optimiza para rendimiento y accesibilidad
9. ASEG√öRATE de que los estilos sean VISIBLES y CONTRASTANTES

ESTRUCTURA CSS REQUERIDA (CLASES ESPEC√çFICAS):
:root {
  /* Variables CSS para colores espec√≠ficos del proyecto */
  --primary-color: /* Color principal apropiado para ${plan.title} */;
  --secondary-color: /* Color secundario */;
  --accent-color: /* Color de acento */;
  --text-color: /* Color de texto legible */;
  --bg-color: /* Color de fondo */;
  --font-primary: /* Fuente principal */;
  --font-secondary: /* Fuente secundaria */;
}

CLASES CSS OBLIGATORIAS:
.container { max-width: 1200px; margin: 0 auto; padding: 0 20px; }
.header { /* Estilos para encabezado */ }
.nav { /* Estilos para navegaci√≥n */ }
.hero { /* Estilos para secci√≥n principal con colores visibles */ }
.section { /* Estilos para secciones generales */ }
.footer { /* Estilos para pie de p√°gina */ }
.grid { /* Sistema de grillas responsive */ }
.card { /* Tarjetas con sombras y efectos */ }
.button { /* Botones con colores contrastantes */ }
.form-control { /* Controles de formulario */ }
.fade-in { /* Animaci√≥n de entrada */ }

ESPECIFICACIONES T√âCNICAS:
- Mobile-first approach
- Usar flexbox y CSS Grid
- Variables CSS para consistencia
- Transiciones suaves (0.3s ease)
- Box-shadow para profundidad
- Border-radius para modernidad
- Tipograf√≠a escalable (rem/em)
- Colores accesibles (contraste WCAG)

ESPECIFICACIONES T√âCNICAS OBLIGATORIAS:
- Colores contrastantes y visibles (NO usar solo blancos/grises)
- Backgrounds con colores s√≥lidos o gradientes
- Tipograf√≠a legible con tama√±os apropiados
- Espaciado generoso entre elementos
- Sombras y efectos visuales para profundidad
- Hover effects llamativos
- Responsive design completo

GENERA UN ARCHIVO CSS COMPLETO DE M√çNIMO 200 L√çNEAS que haga que la p√°gina se vea PROFESIONAL, COLORIDA y ATRACTIVA.

IMPORTANTE: Los estilos deben ser VISIBLES y CONTRASTANTES, no sutiles.

Responde √öNICAMENTE con el c√≥digo CSS completo, sin explicaciones ni comentarios adicionales.
`;

      console.log('üé® Intentando llamada a API para CSS...');

      // Usar EnhancedAPIService como en Constructor
      const response = await this.apiService.sendMessage(designPrompt, {
        agentName: 'DesignArchitectAgent',
        maxTokens: 4096,
        temperature: 0.7,
        systemPrompt: 'Eres un dise√±ador web experto especializado en CSS moderno y responsive.'
      });

      if (!response.success || !response.data) {
        throw new Error(`Error al generar CSS: ${response.error}`);
      }

      console.log('üé® API respondi√≥ exitosamente para CSS');

      // Usar extracci√≥n robusta de c√≥digo
      const cssContent = this.extractCodeContent(response.data, 'css');
      console.log(`üé® CSS extra√≠do: ${cssContent.length} caracteres`);

      return cssContent;
    } catch (error) {
      console.error('üé® Error generating CSS with Design Agent:', error);
      console.log('üé® Usando fallback CSS profesional...');
      // Fallback CSS
      return this.generateFallbackCSS(plan);
    }
  }

  private async generateHTMLWithCodeAgent(plan: WebPagePlan): Promise<string> {
    console.log('üèóÔ∏è Code Constructor Agent - Intentando generar HTML...');

    try {
      const codePrompt = `
Como Code Constructor Agent especializado, crea un archivo HTML COMPLETO y FUNCIONAL basado en este plan:

PROYECTO: ${plan.title}
DESCRIPCI√ìN: ${plan.description}
ESTRUCTURA REQUERIDA: ${JSON.stringify(plan.structure, null, 2)}
FUNCIONALIDADES: ${plan.functionality.join(', ')}

INSTRUCCIONES CR√çTICAS:
1. Genera HTML COMPLETO que funcione inmediatamente
2. Incluye CONTENIDO REAL Y PROFESIONAL (NO lorem ipsum)
3. Implementa TODAS las secciones especificadas en el plan
4. Crea estructura HTML5 sem√°ntica y accesible
5. USA LAS CLASES CSS EXACTAS que se generaron en el CSS
6. Configura meta tags completos para SEO
7. Incluye atributos de accesibilidad (ARIA, alt, etc.)
8. Prepara estructura para funcionalidades JavaScript

CLASES CSS DISPONIBLES (USAR EXACTAMENTE ESTAS):
- .container (contenedor principal)
- .header (encabezado)
- .nav (navegaci√≥n)
- .hero (secci√≥n principal)
- .section (secciones generales)
- .footer (pie de p√°gina)
- .grid (sistema de grillas)
- .card (tarjetas)
- .button (botones)
- .form-control (controles de formulario)
- .fade-in (animaci√≥n de entrada)

ESTRUCTURA HTML REQUERIDA (USAR CLASES CSS EXACTAS):
<header class="header">
  <div class="container">
    <nav class="nav">
      <!-- Navegaci√≥n con clases CSS -->
    </nav>
  </div>
</header>

<main>
  <section class="hero">
    <div class="container">
      <!-- Contenido hero con clases CSS -->
    </div>
  </section>

  <section class="section">
    <div class="container">
      <div class="grid">
        <div class="card">
          <!-- Contenido con clases CSS -->
        </div>
      </div>
    </div>
  </section>
</main>

<footer class="footer">
  <div class="container">
    <!-- Footer con clases CSS -->
  </footer>
</footer>

IMPORTANTE: SIEMPRE usar las clases CSS (.container, .header, .nav, .hero, .section, .footer, .grid, .card, .button, .form-control)

CONTENIDO ESPEC√çFICO PARA CADA SECCI√ìN:
${plan.structure.map(section => `
- SECCI√ìN "${section.section}":
  * T√≠tulo: ${section.section}
  * Descripci√≥n: ${section.description}
  * Contenido espec√≠fico: ${section.content.join(', ')}
  * Debe incluir contenido real y profesional relacionado con "${plan.title}"
`).join('')}

REQUISITOS DE CONTENIDO:
- T√≠tulos descriptivos y profesionales
- P√°rrafos con contenido real relacionado con el proyecto
- Listas, enlaces, botones funcionales
- Formularios con campos apropiados
- Im√°genes con alt text descriptivo
- Navegaci√≥n entre secciones
- Call-to-action relevantes
- Informaci√≥n de contacto real

ESPECIFICACIONES T√âCNICAS:
- HTML5 sem√°ntico (header, nav, main, section, article, aside, footer)
- Meta tags completos (viewport, description, keywords, author)
- Atributos ARIA para accesibilidad
- IDs √∫nicos para navegaci√≥n
- Classes CSS apropiadas
- Estructura preparada para JavaScript
- Enlaces relativos a archivos CSS y JS

EJEMPLO DE ESTRUCTURA OBLIGATORIA:
<header class="header">
  <div class="container">
    <nav class="nav">
      <h1>Logo/T√≠tulo</h1>
      <ul>
        <li><a href="#inicio" class="button">Inicio</a></li>
        <li><a href="#productos" class="button">Productos</a></li>
      </ul>
    </nav>
  </div>
</header>

<main>
  <section class="hero">
    <div class="container">
      <h1>T√≠tulo Principal</h1>
      <p>Descripci√≥n atractiva</p>
      <a href="#contacto" class="button">Bot√≥n Principal</a>
    </div>
  </section>

  <section class="section">
    <div class="container">
      <h2>Secci√≥n de Contenido</h2>
      <div class="grid">
        <div class="card">
          <h3>Elemento 1</h3>
          <p>Contenido espec√≠fico</p>
        </div>
      </div>
    </div>
  </section>
</main>

<footer class="footer">
  <div class="container">
    <p>Informaci√≥n de contacto</p>
  </div>
</footer>

GENERA UN ARCHIVO HTML COMPLETO DE M√çNIMO 150 L√çNEAS usando EXACTAMENTE estas clases CSS.

CR√çTICO: SIEMPRE usar class="container", class="header", class="nav", class="hero", class="section", class="footer", class="grid", class="card", class="button"

Responde √öNICAMENTE con el c√≥digo HTML completo, sin explicaciones ni comentarios adicionales.
`;

      console.log('üèóÔ∏è Intentando llamada a API para HTML...');

      // Usar EnhancedAPIService como en Constructor
      const response = await this.apiService.sendMessage(codePrompt, {
        agentName: 'CodeConstructorAgent',
        maxTokens: 4096,
        temperature: 0.7,
        systemPrompt: 'Eres un desarrollador web experto especializado en HTML5 sem√°ntico y accesible.'
      });

      if (!response.success || !response.data) {
        throw new Error(`Error al generar HTML: ${response.error}`);
      }

      console.log('üèóÔ∏è API respondi√≥ exitosamente para HTML');

      // Usar extracci√≥n robusta de c√≥digo
      const htmlContent = this.extractCodeContent(response.data, 'html');
      console.log(`üèóÔ∏è HTML extra√≠do: ${htmlContent.length} caracteres`);

      return htmlContent;
    } catch (error) {
      console.error('üèóÔ∏è Error generating HTML with Code Agent:', error);
      console.log('üèóÔ∏è Usando fallback HTML profesional...');
      // Fallback HTML
      return this.generateFallbackHTML(plan);
    }
  }

  private async generateHTML(plan: WebPagePlan): Promise<string> {
    const htmlPrompt = `
Genera un archivo HTML completo y profesional basado en el siguiente plan:

T√çTULO: ${plan.title}
DESCRIPCI√ìN: ${plan.description}
ESTRUCTURA: ${JSON.stringify(plan.structure, null, 2)}
DISE√ëO: ${JSON.stringify(plan.design, null, 2)}
FUNCIONALIDADES: ${plan.functionality.join(', ')}

Requisitos:
1. HTML5 sem√°ntico y accesible
2. Meta tags completos para SEO
3. Estructura responsive
4. Enlaces a styles.css y script.js
5. Contenido real y profesional (no lorem ipsum)
6. Atributos alt en im√°genes
7. Estructura clara con header, main, sections y footer

Responde SOLO con el c√≥digo HTML, sin explicaciones.
`;

    const response = await tryWithFallback(htmlPrompt, 'Claude 3.5 Sonnet V2');
    return response.content.trim();
  }

  private async generateCSS(plan: WebPagePlan): Promise<string> {
    const cssPrompt = `
Genera un archivo CSS completo y profesional basado en el siguiente plan:

T√çTULO: ${plan.title}
DESCRIPCI√ìN: ${plan.description}
DISE√ëO: ${JSON.stringify(plan.design, null, 2)}
ESTRUCTURA: ${JSON.stringify(plan.structure, null, 2)}

Requisitos:
1. CSS moderno con variables CSS
2. Dise√±o completamente responsive (mobile-first)
3. Animaciones y transiciones suaves
4. Tipograf√≠a profesional
5. Esquema de colores coherente
6. Grid y Flexbox para layouts
7. Hover effects y micro-interacciones
8. Optimizado para rendimiento

Responde SOLO con el c√≥digo CSS, sin explicaciones.
`;

    const response = await tryWithFallback(cssPrompt, 'Claude 3.5 Sonnet V2');
    return response.content.trim();
  }

  private async generateJavaScript(plan: WebPagePlan): Promise<string> {
    console.log('‚ö° JavaScript Agent - Intentando generar JS...');

    try {
      const jsPrompt = `
Como JavaScript Agent especializado, crea un archivo JavaScript COMPLETO y FUNCIONAL basado en este plan:

PROYECTO: ${plan.title}
FUNCIONALIDADES REQUERIDAS: ${plan.functionality.join(', ')}
ESTRUCTURA DE SECCIONES: ${JSON.stringify(plan.structure, null, 2)}

INSTRUCCIONES CR√çTICAS:
1. Genera JavaScript COMPLETO que funcione inmediatamente
2. Implementa TODAS las funcionalidades especificadas
3. Crea interactividad real y profesional
4. Usa JavaScript vanilla moderno (ES6+)
5. Incluye manejo de eventos y animaciones
6. Optimiza para rendimiento y experiencia de usuario

FUNCIONALIDADES OBLIGATORIAS:
1. DOMContentLoaded event listener principal
2. Navegaci√≥n suave entre secciones (smooth scroll)
3. Menu responsive toggle (hamburger menu)
4. Animaciones al scroll (Intersection Observer)
5. Formularios funcionales con validaci√≥n
6. Efectos hover y interacciones
7. Lazy loading de im√°genes
8. Manejo de errores y fallbacks

ESTRUCTURA JAVASCRIPT REQUERIDA:
- Event listener principal DOMContentLoaded
- Funciones para navegaci√≥n suave
- Sistema de animaciones al scroll
- Manejo de formularios
- Efectos interactivos
- Utilidades y helpers
- Inicializaci√≥n de componentes

ESPECIFICACIONES T√âCNICAS:
- ES6+ syntax (const, let, arrow functions)
- Intersection Observer API para animaciones
- Event delegation para performance
- Debouncing para scroll events
- Error handling con try-catch
- Console logs informativos
- C√≥digo modular y reutilizable

FUNCIONALIDADES ESPEC√çFICAS PARA ESTE PROYECTO:
${plan.structure.map(section => `
- Funcionalidad para secci√≥n "${section.section}":
  * Animaci√≥n de entrada
  * Interactividad espec√≠fica
  * Navegaci√≥n hacia esta secci√≥n
`).join('')}

GENERA UN ARCHIVO JAVASCRIPT COMPLETO DE M√çNIMO 100 L√çNEAS con funcionalidad real e interactividad profesional.

Responde √öNICAMENTE con el c√≥digo JavaScript completo, sin explicaciones ni comentarios adicionales.
`;

      console.log('‚ö° Intentando llamada a API para JavaScript...');

      // Usar EnhancedAPIService como en Constructor
      const response = await this.apiService.sendMessage(jsPrompt, {
        agentName: 'JavaScriptAgent',
        maxTokens: 4096,
        temperature: 0.7,
        systemPrompt: 'Eres un desarrollador JavaScript experto especializado en vanilla JS moderno e interactividad web.'
      });

      if (!response.success || !response.data) {
        throw new Error(`Error al generar JavaScript: ${response.error}`);
      }

      console.log('‚ö° API respondi√≥ exitosamente para JavaScript');

      // Usar extracci√≥n robusta de c√≥digo
      const jsContent = this.extractCodeContent(response.data, 'js');
      console.log(`‚ö° JavaScript extra√≠do: ${jsContent.length} caracteres`);

      return jsContent;
    } catch (error) {
      console.error('‚ö° Error generating JavaScript:', error);
      console.log('‚ö° Usando fallback JavaScript profesional...');
      // Fallback JavaScript
      return this.generateFallbackJS(plan);
    }
  }

  /**
   * GIFT Agent (Graphics, Icons, Features & Transitions)
   * Enriquece el HTML y CSS con elementos visuales, iconos SVG, animaciones y efectos
   */
  private async generateVisualEnhancements(plan: WebPagePlan, htmlContent: string, cssContent: string): Promise<{ enhancedHTML: string, enhancedCSS: string }> {
    console.log('üé® GIFT Agent - Iniciando enriquecimiento visual...');

    try {
      // Prompt para el GIFT Agent
      const giftPrompt = `
Como GIFT Agent (Graphics, Icons, Features & Transitions) especializado, enriquece el HTML y CSS existente con elementos visuales profesionales:

PROYECTO: ${plan.title}
DESCRIPCI√ìN: ${plan.description}
ESTRUCTURA: ${JSON.stringify(plan.structure, null, 2)}

HTML ACTUAL:
${htmlContent}

CSS ACTUAL:
${cssContent}

RESPONSABILIDADES DEL GIFT AGENT:

1. **ICONOS SVG PERSONALIZADOS**:
   - Crear iconos SVG inline coherentes con el dise√±o
   - Iconos para navegaci√≥n, caracter√≠sticas, servicios
   - Iconos decorativos apropiados para "${plan.title}"
   - SVG optimizados y accesibles

2. **ELEMENTOS GR√ÅFICOS**:
   - Ilustraciones SVG simples y elegantes
   - Elementos decorativos (l√≠neas, formas, patrones)
   - Gr√°ficos que complementen el contenido

3. **ANIMACIONES CSS AVANZADAS**:
   - Keyframes para animaciones personalizadas
   - Transiciones suaves y profesionales
   - Micro-interacciones en hover/focus
   - Animaciones de entrada (fade-in, slide-in, scale)

4. **EFECTOS VISUALES**:
   - Gradientes modernos y atractivos
   - Sombras con profundidad
   - Efectos de hover llamativos
   - Elementos decorativos con CSS

5. **EMOJIS Y S√çMBOLOS**:
   - Emojis apropiados para el contexto
   - S√≠mbolos Unicode decorativos
   - Posicionamiento estrat√©gico

INSTRUCCIONES ESPEC√çFICAS:

**PARA HTML ENRIQUECIDO**:
- Insertar iconos SVG inline donde sea apropiado
- Agregar emojis contextuales en t√≠tulos y contenido
- Mantener estructura sem√°ntica existente
- Agregar clases para nuevas animaciones

**PARA CSS ENRIQUECIDO**:
- Agregar nuevas animaciones @keyframes
- Crear efectos hover avanzados
- Implementar gradientes y sombras
- A√±adir transiciones suaves
- Mantener responsive design

EJEMPLOS DE ICONOS SVG REQUERIDOS:
- Icono de men√∫ hamburguesa
- Iconos de navegaci√≥n (home, about, contact)
- Iconos de caracter√≠sticas/servicios
- Iconos de redes sociales
- Iconos decorativos

EJEMPLOS DE ANIMACIONES:
- fadeInUp, slideInLeft, scaleIn
- Hover effects para botones y cards
- Animaciones de loading/spinner
- Parallax effects sutiles

ESPECIFICACIONES T√âCNICAS:
- SVG inline optimizados (viewBox, sin dimensiones fijas)
- Animaciones CSS puras (sin JavaScript)
- Performance optimizado
- Accesibilidad mantenida
- Responsive en todos los elementos

FORMATO DE RESPUESTA:
Responde con un JSON v√°lido con esta estructura exacta:
{
  "enhancedHTML": "HTML completo con iconos SVG y emojis insertados",
  "enhancedCSS": "CSS completo con nuevas animaciones y efectos visuales"
}

IMPORTANTE:
- Mant√©n TODO el contenido HTML y CSS existente
- SOLO agrega elementos visuales y mejoras
- Los iconos SVG deben ser inline, no referencias externas
- Las animaciones deben ser suaves y profesionales
- Aseg√∫rate de que el JSON sea v√°lido

Responde √öNICAMENTE con el JSON, sin explicaciones adicionales.
`;

      console.log('üé® Enviando prompt al GIFT Agent...');

      const response = await this.apiService.sendMessage(giftPrompt, {
        agentName: 'GIFTAgent',
        maxTokens: 6144,
        temperature: 0.8,
        systemPrompt: 'Eres un especialista en elementos visuales, iconos SVG, animaciones CSS y efectos gr√°ficos para web.'
      });

      if (!response.success || !response.data) {
        throw new Error(`Error al generar enriquecimiento visual: ${response.error}`);
      }

      console.log('üé® GIFT Agent respondi√≥ exitosamente');

      // Intentar parsear la respuesta JSON
      let enhancedContent;
      try {
        // Limpiar la respuesta para extraer solo el JSON
        const cleanResponse = response.data.trim();
        const jsonMatch = cleanResponse.match(/\{[\s\S]*\}/);

        if (jsonMatch) {
          enhancedContent = JSON.parse(jsonMatch[0]);
        } else {
          throw new Error('No se encontr√≥ JSON v√°lido en la respuesta');
        }
      } catch (parseError) {
        console.warn('üé® Error parseando JSON del GIFT Agent, usando contenido original:', parseError);
        return {
          enhancedHTML: htmlContent,
          enhancedCSS: cssContent
        };
      }

      // Validar que el contenido enriquecido existe
      if (!enhancedContent.enhancedHTML || !enhancedContent.enhancedCSS) {
        console.warn('üé® Contenido enriquecido incompleto, usando original');
        return {
          enhancedHTML: htmlContent,
          enhancedCSS: cssContent
        };
      }

      console.log('üé® Enriquecimiento visual completado exitosamente');
      console.log(`üé® HTML enriquecido: ${enhancedContent.enhancedHTML.length} caracteres`);
      console.log(`üé® CSS enriquecido: ${enhancedContent.enhancedCSS.length} caracteres`);

      return {
        enhancedHTML: enhancedContent.enhancedHTML,
        enhancedCSS: enhancedContent.enhancedCSS
      };

    } catch (error) {
      console.error('üé® Error en GIFT Agent:', error);
      console.log('üé® Usando contenido original sin enriquecimiento');

      // Fallback: devolver contenido original
      return {
        enhancedHTML: htmlContent,
        enhancedCSS: cssContent
      };
    }
  }

  /**
   * Production Agent - Control de Calidad y Optimizaci√≥n Final
   * Analiza la p√°gina web generada para detectar problemas y aplicar optimizaciones
   */
  private async performQualityControl(
    plan: WebPagePlan,
    htmlContent: string,
    cssContent: string,
    jsContent: string
  ): Promise<{ finalHTML: string, finalCSS: string, finalJS: string, qualityReport: string }> {
    console.log('üîç Production Agent - Iniciando control de calidad...');

    try {
      // Validar contenido de entrada
      if (!htmlContent || !cssContent || !jsContent) {
        console.warn('üîç Contenido de entrada incompleto detectado');
        console.log(`üîç HTML: ${htmlContent?.length || 0} chars, CSS: ${cssContent?.length || 0} chars, JS: ${jsContent?.length || 0} chars`);
      }

      // Prompt optimizado para el Production Agent
      const productionPrompt = `
Como Production Agent especializado en control de calidad web, analiza y optimiza los archivos finales de la p√°gina web.

PROYECTO: ${plan.title}
DESCRIPCI√ìN: ${plan.description}

ARCHIVOS A ANALIZAR:

HTML ACTUAL (${htmlContent.length} caracteres):
${htmlContent}

CSS ACTUAL (${cssContent.length} caracteres):
${cssContent}

JAVASCRIPT ACTUAL (${jsContent.length} caracteres):
${jsContent}

TAREAS DE CONTROL DE CALIDAD:

1. **VALIDACI√ìN ESTRUCTURAL**:
   - Verificar HTML sem√°ntico y v√°lido
   - Asegurar estructura DOCTYPE correcta (sin duplicados)
   - Validar etiquetas cerradas correctamente
   - Comprobar meta tags esenciales

2. **OPTIMIZACI√ìN DE C√ìDIGO**:
   - Limpiar c√≥digo redundante o innecesario
   - Optimizar selectores CSS
   - Mejorar eficiencia de JavaScript
   - Eliminar comentarios de desarrollo

3. **MEJORAS DE RENDIMIENTO**:
   - Optimizar carga de recursos
   - Minimizar reflows y repaints
   - Mejorar tiempo de carga
   - Aplicar lazy loading donde sea apropiado

4. **ACCESIBILIDAD Y UX**:
   - A√±adir atributos ARIA necesarios
   - Verificar contraste de colores
   - Asegurar navegaci√≥n por teclado
   - Mejorar experiencia m√≥vil

FORMATO DE RESPUESTA OBLIGATORIO:

REPORTE_CALIDAD:
[Descripci√≥n detallada de problemas encontrados y correcciones aplicadas]

HTML_OPTIMIZADO:
\`\`\`html
[C√≥digo HTML completo corregido y optimizado - DEBE incluir DOCTYPE, html, head y body completos]
\`\`\`

CSS_OPTIMIZADO:
\`\`\`css
[C√≥digo CSS completo corregido y optimizado - DEBE incluir todos los estilos necesarios]
\`\`\`

JS_OPTIMIZADO:
\`\`\`javascript
[C√≥digo JavaScript completo corregido y optimizado - DEBE incluir toda la funcionalidad]
\`\`\`

REGLAS CR√çTICAS:
- NUNCA truncar o cortar c√≥digo a la mitad
- MANTENER toda la funcionalidad existente
- ASEGURAR que cada secci√≥n de c√≥digo est√© COMPLETA
- NO duplicar DOCTYPE o etiquetas HTML
- PRESERVAR toda la estructura y contenido
- SOLO optimizar y mejorar, NUNCA eliminar caracter√≠sticas

Responde EXACTAMENTE con el formato especificado arriba.
`;

      console.log('üîç Enviando an√°lisis a Production Agent...');

      // Usar configuraci√≥n distribuida para Production Agent
      const agentConfig = getDistributedAgentConfig('ProductionAgent');
      console.log(`üîç Usando configuraci√≥n: ${agentConfig.model.id} con ${agentConfig.maxTokens} tokens`);

      const response = await this.apiService.sendMessage(productionPrompt, {
        agentName: 'ProductionAgent',
        maxTokens: agentConfig.maxTokens,
        temperature: agentConfig.temperature,
        systemPrompt: 'Eres un experto en control de calidad web. Tu trabajo es optimizar c√≥digo sin truncarlo ni eliminarlo. SIEMPRE devuelve c√≥digo completo y funcional.'
      });

      if (!response.success || !response.data) {
        throw new Error(`Error en Production Agent: ${response.error}`);
      }

      console.log('üîç Production Agent respondi√≥ exitosamente');
      console.log(`üîç Respuesta recibida: ${response.data.length} caracteres`);

      // Extraer el reporte de calidad y los archivos optimizados con patrones mejorados
      const responseContent = response.data;

      // Extraer reporte de calidad con patr√≥n m√°s robusto
      const reportMatch = responseContent.match(/REPORTE_CALIDAD:\s*([\s\S]*?)(?=HTML_OPTIMIZADO:|$)/i);
      const qualityReport = reportMatch ? reportMatch[1].trim() : 'An√°lisis de calidad completado';

      // Extraer HTML optimizado con m√∫ltiples patrones de fallback
      let finalHTML = this.extractCodeWithFallback(responseContent, 'html', htmlContent);

      // Extraer CSS optimizado con m√∫ltiples patrones de fallback
      let finalCSS = this.extractCodeWithFallback(responseContent, 'css', cssContent);

      // Extraer JavaScript optimizado con m√∫ltiples patrones de fallback
      let finalJS = this.extractCodeWithFallback(responseContent, 'javascript', jsContent);

      // Validaci√≥n de integridad del c√≥digo extra√≠do
      const validationResults = this.validateExtractedCode(finalHTML, finalCSS, finalJS, htmlContent, cssContent, jsContent);

      if (!validationResults.isValid) {
        console.warn('üîç C√≥digo extra√≠do no v√°lido, usando archivos originales');
        console.log('üîç Problemas detectados:', validationResults.issues);
        finalHTML = htmlContent;
        finalCSS = cssContent;
        finalJS = jsContent;
      }

      // Limpiar duplicados de DOCTYPE si existen
      finalHTML = this.cleanDuplicateDoctype(finalHTML);

      console.log('üîç Archivos optimizados extra√≠dos exitosamente');
      console.log(`üîç HTML final: ${finalHTML.length} caracteres`);
      console.log(`üîç CSS final: ${finalCSS.length} caracteres`);
      console.log(`üîç JS final: ${finalJS.length} caracteres`);

      return {
        finalHTML: finalHTML || htmlContent,
        finalCSS: finalCSS || cssContent,
        finalJS: finalJS || jsContent,
        qualityReport: qualityReport
      };

    } catch (error) {
      console.error('üîç Error en Production Agent:', error);
      console.log('üîç Usando archivos originales sin optimizaci√≥n');

      // Fallback: devolver archivos originales
      return {
        finalHTML: htmlContent,
        finalCSS: cssContent,
        finalJS: jsContent,
        qualityReport: `Control de calidad omitido debido a error t√©cnico: ${error instanceof Error ? error.message : 'Error desconocido'}`
      };
    }
  }

  /**
   * Extrae c√≥digo con m√∫ltiples patrones de fallback para mayor robustez
   */
  private extractCodeWithFallback(responseContent: string, codeType: string, fallbackContent: string): string {
    const patterns = [
      // Patr√≥n principal con tipo espec√≠fico
      new RegExp(`${codeType.toUpperCase()}_OPTIMIZADO:\\s*\`\`\`${codeType}\\s*([\\s\\S]*?)\\s*\`\`\``, 'i'),
      // Patr√≥n sin tipo espec√≠fico
      new RegExp(`${codeType.toUpperCase()}_OPTIMIZADO:\\s*\`\`\`\\s*([\\s\\S]*?)\\s*\`\`\``, 'i'),
      // Patr√≥n gen√©rico con tipo
      new RegExp(`\`\`\`${codeType}\\s*([\\s\\S]*?)\\s*\`\`\``, 'i'),
      // Patr√≥n m√°s flexible
      new RegExp(`${codeType.toUpperCase()}[^:]*:\\s*\`\`\`[^\\n]*\\n([\\s\\S]*?)\\n\`\`\``, 'i')
    ];

    for (const pattern of patterns) {
      const match = responseContent.match(pattern);
      if (match && match[1] && match[1].trim()) {
        const extractedCode = match[1].trim();
        console.log(`üîç C√≥digo ${codeType} extra√≠do exitosamente con patr√≥n: ${pattern.source.substring(0, 50)}...`);
        return extractedCode;
      }
    }

    console.warn(`üîç No se pudo extraer c√≥digo ${codeType}, usando contenido original`);
    return fallbackContent;
  }

  /**
   * Valida la integridad del c√≥digo extra√≠do
   */
  private validateExtractedCode(
    html: string,
    css: string,
    js: string,
    originalHtml: string,
    originalCss: string,
    originalJs: string
  ): { isValid: boolean; issues: string[] } {
    const issues: string[] = [];

    // Validar HTML
    if (!html || html.length < 50) {
      issues.push('HTML demasiado corto o vac√≠o');
    } else if (!html.includes('<!DOCTYPE') && !html.includes('<html')) {
      issues.push('HTML no contiene estructura b√°sica');
    } else if (html.length < originalHtml.length * 0.5) {
      issues.push('HTML significativamente m√°s corto que el original');
    }

    // Validar CSS
    if (!css || css.length < 20) {
      issues.push('CSS demasiado corto o vac√≠o');
    } else if (css.length < originalCss.length * 0.3) {
      issues.push('CSS significativamente m√°s corto que el original');
    }

    // Validar JavaScript
    if (!js || js.length < 10) {
      issues.push('JavaScript demasiado corto o vac√≠o');
    } else if (js.length < originalJs.length * 0.3) {
      issues.push('JavaScript significativamente m√°s corto que el original');
    }

    // Verificar truncaci√≥n
    if (html.endsWith('...') || css.endsWith('...') || js.endsWith('...')) {
      issues.push('C√≥digo aparenta estar truncado (termina en ...)');
    }

    return {
      isValid: issues.length === 0,
      issues
    };
  }

  /**
   * Limpia DOCTYPE duplicados del HTML
   */
  private cleanDuplicateDoctype(html: string): string {
    // Contar ocurrencias de DOCTYPE
    const doctypeMatches = html.match(/<!DOCTYPE[^>]*>/gi);

    if (doctypeMatches && doctypeMatches.length > 1) {
      console.log('üîç DOCTYPE duplicado detectado, limpiando...');
      // Mantener solo el primer DOCTYPE
      let cleanedHtml = html;
      for (let i = 1; i < doctypeMatches.length; i++) {
        cleanedHtml = cleanedHtml.replace(doctypeMatches[i], '');
      }
      return cleanedHtml.trim();
    }

    return html;
  }

  /**
   * Genera una mejora b√°sica del prompt cuando falla la IA
   */
  private generateBasicEnhancement(originalInstruction: string): string {
    if (!originalInstruction || originalInstruction.trim().length < 5) {
      return originalInstruction;
    }

    const instruction = originalInstruction.trim().toLowerCase();

    // Detectar tipo de proyecto
    let projectType = 'sitio web';
    let enhancements: string[] = [];

    if (instruction.includes('restaurante') || instruction.includes('comida') || instruction.includes('cocina')) {
      projectType = 'restaurante';
      enhancements = [
        'men√∫ digital interactivo con categor√≠as de platos',
        'galer√≠a de fotos de comida y ambiente',
        'sistema de reservas online',
        'informaci√≥n del chef y historia del restaurante',
        'testimonios de clientes',
        'horarios y ubicaci√≥n con mapa',
        'dise√±o c√°lido que refleje la identidad gastron√≥mica'
      ];
    } else if (instruction.includes('tienda') || instruction.includes('shop') || instruction.includes('venta')) {
      projectType = 'tienda online';
      enhancements = [
        'cat√°logo de productos con filtros de b√∫squeda',
        'carrito de compras y proceso de checkout',
        'galer√≠a de im√°genes de productos',
        'sistema de rese√±as y valoraciones',
        'informaci√≥n de env√≠os y devoluciones',
        'testimonios de clientes',
        'dise√±o moderno que inspire confianza en las compras'
      ];
    } else if (instruction.includes('empresa') || instruction.includes('negocio') || instruction.includes('corporat')) {
      projectType = 'empresa';
      enhancements = [
        'secci√≥n sobre nosotros con historia y valores',
        'servicios detallados con descripciones',
        'equipo de trabajo con perfiles profesionales',
        'testimonios y casos de √©xito',
        'formulario de contacto y cotizaciones',
        'blog o noticias de la industria',
        'dise√±o profesional que transmita credibilidad'
      ];
    } else if (instruction.includes('portfolio') || instruction.includes('portafolio') || instruction.includes('personal')) {
      projectType = 'portfolio personal';
      enhancements = [
        'galer√≠a de proyectos con descripciones detalladas',
        'secci√≥n sobre m√≠ con experiencia profesional',
        'habilidades y tecnolog√≠as dominadas',
        'testimonios de clientes o empleadores',
        'blog personal o art√≠culos t√©cnicos',
        'formulario de contacto para oportunidades',
        'dise√±o creativo que refleje personalidad profesional'
      ];
    } else {
      // Mejora gen√©rica
      enhancements = [
        'secci√≥n hero con llamada a la acci√≥n clara',
        'contenido organizado en secciones l√≥gicas',
        'galer√≠a de im√°genes relevantes',
        'testimonios o rese√±as de usuarios',
        'informaci√≥n de contacto accesible',
        'dise√±o responsive para todos los dispositivos',
        'navegaci√≥n intuitiva y f√°cil de usar'
      ];
    }

    const enhancedDescription = `Una p√°gina web profesional para ${projectType} que incluya:

‚Ä¢ ${enhancements.join('\n‚Ä¢ ')}

El dise√±o debe ser moderno, responsive y optimizado para la experiencia del usuario, con colores y tipograf√≠a apropiados para el sector. La p√°gina debe cargar r√°pidamente y ser f√°cil de navegar tanto en dispositivos m√≥viles como de escritorio.

Funcionalidades t√©cnicas: navegaci√≥n suave, animaciones CSS sutiles, formularios funcionales, optimizaci√≥n SEO b√°sica, y compatibilidad con navegadores modernos.`;

    return enhancedDescription;
  }

  public reset(): void {
    this.state = {
      currentPhase: 'input',
      userInstruction: '',
      isProcessing: false
    };
    this.emitStateChange();
  }

  private emitStateChange(): void {
    this.callbacks.onStateChange({ ...this.state });
  }

  /**
   * Extrae el contenido de c√≥digo de la respuesta del modelo de IA (copiado de Constructor)
   * @param responseContent Contenido de la respuesta del modelo de IA
   * @param fileType Tipo de archivo (html, css, js)
   * @returns Contenido del c√≥digo extra√≠do
   */
  private extractCodeContent(responseContent: string, fileType: string): string {
    // Verificar que responseContent no sea undefined o null
    if (!responseContent) {
      console.warn(`extractCodeContent: responseContent es ${responseContent} para ${fileType}`);
      return this.generateDefaultContent(fileType);
    }

    // Intentar extraer el c√≥digo del bloque de c√≥digo
    const codeBlockRegex = new RegExp(`\`\`\`(?:${fileType})?\\s*([\\s\\S]*?)\\s*\`\`\``, 'i');
    const match = responseContent.match(codeBlockRegex);

    if (match && match[1] && match[1].trim()) {
      return match[1].trim();
    }

    // Si no hay bloque de c√≥digo o est√° vac√≠o, intentar usar todo el contenido
    const trimmedContent = responseContent.trim();
    if (trimmedContent) {
      return trimmedContent;
    }

    // Si todo lo anterior falla, generar un contenido por defecto
    console.warn(`No se pudo extraer contenido v√°lido para ${fileType}, generando contenido por defecto`);
    return this.generateDefaultContent(fileType);
  }

  /**
   * Genera contenido por defecto cuando falla la extracci√≥n
   * @param fileType Tipo de archivo
   * @returns Contenido por defecto
   */
  private generateDefaultContent(fileType: string): string {
    switch (fileType.toLowerCase()) {
      case 'html':
        return this.generateFallbackHTML({ title: 'P√°gina Web', description: 'P√°gina generada autom√°ticamente', structure: [], design: { colors: [], fonts: [], layout: '' }, functionality: [] });
      case 'css':
        return this.generateFallbackCSS({ title: 'P√°gina Web', description: 'P√°gina generada autom√°ticamente', structure: [], design: { colors: [], fonts: [], layout: '' }, functionality: [] });
      case 'js':
      case 'javascript':
        return this.generateFallbackJS({ title: 'P√°gina Web', description: 'P√°gina generada autom√°ticamente', structure: [], design: { colors: [], fonts: [], layout: '' }, functionality: [] });
      default:
        return `// Contenido por defecto para ${fileType}\nconsole.log('Archivo generado autom√°ticamente');`;
    }
  }

  private generateFallbackCSS(plan: WebPagePlan): string {
    return `/* Professional CSS - ${plan.title} */
:root {
  --primary-color: #2563eb;
  --secondary-color: #1e40af;
  --accent-color: #f59e0b;
  --text-color: #1f2937;
  --text-light: #6b7280;
  --bg-color: #ffffff;
  --bg-light: #f8fafc;
  --border-color: #e5e7eb;
  --shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
  --shadow-lg: 0 10px 15px -3px rgba(0, 0, 0, 0.1);
  --border-radius: 8px;
  --transition: all 0.3s ease;
}

* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

html {
  scroll-behavior: smooth;
}

body {
  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
  line-height: 1.6;
  color: var(--text-color);
  background-color: var(--bg-color);
}

.container {
  max-width: 1200px;
  margin: 0 auto;
  padding: 0 20px;
}

/* Header Styles */
.header {
  background: var(--bg-color);
  box-shadow: var(--shadow);
  position: sticky;
  top: 0;
  z-index: 1000;
}

.header-content {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 1rem 0;
}

.logo-text {
  font-size: 1.5rem;
  font-weight: bold;
  color: var(--primary-color);
}

.nav-list {
  display: flex;
  list-style: none;
  gap: 2rem;
}

.nav-link {
  text-decoration: none;
  color: var(--text-color);
  font-weight: 500;
  transition: var(--transition);
  padding: 0.5rem 1rem;
  border-radius: var(--border-radius);
}

.nav-link:hover {
  color: var(--primary-color);
  background-color: var(--bg-light);
}

.nav-toggle {
  display: none;
  flex-direction: column;
  background: none;
  border: none;
  cursor: pointer;
  padding: 0.5rem;
}

.nav-toggle span {
  width: 25px;
  height: 3px;
  background: var(--text-color);
  margin: 3px 0;
  transition: var(--transition);
}

/* Hero Section */
.hero {
  background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
  color: white;
  padding: 6rem 0;
  text-align: center;
}

.hero-title {
  font-size: 3.5rem;
  font-weight: bold;
  margin-bottom: 1.5rem;
  line-height: 1.2;
}

.hero-description {
  font-size: 1.25rem;
  margin-bottom: 2.5rem;
  max-width: 600px;
  margin-left: auto;
  margin-right: auto;
  opacity: 0.9;
}

.hero-actions {
  display: flex;
  gap: 1rem;
  justify-content: center;
  flex-wrap: wrap;
}

/* Buttons */
.btn {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  padding: 0.75rem 2rem;
  border-radius: var(--border-radius);
  text-decoration: none;
  font-weight: 600;
  transition: var(--transition);
  border: 2px solid transparent;
  cursor: pointer;
  font-size: 1rem;
}

.btn-primary {
  background: var(--accent-color);
  color: white;
}

.btn-primary:hover {
  background: #d97706;
  transform: translateY(-2px);
  box-shadow: var(--shadow-lg);
}

.btn-secondary {
  background: transparent;
  color: white;
  border-color: white;
}

.btn-secondary:hover {
  background: white;
  color: var(--primary-color);
}

/* Sections */
.section {
  padding: 5rem 0;
}

.section:nth-child(even) {
  background-color: var(--bg-light);
}

.section-header {
  text-align: center;
  margin-bottom: 3rem;
}

.section-title {
  font-size: 2.5rem;
  font-weight: bold;
  margin-bottom: 1rem;
  color: var(--text-color);
}

.section-description {
  font-size: 1.125rem;
  color: var(--text-light);
  max-width: 600px;
  margin: 0 auto;
}

/* Grid Layout */
.grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
  gap: 2rem;
  margin-top: 3rem;
}

/* Cards */
.card {
  background: var(--bg-color);
  padding: 2rem;
  border-radius: var(--border-radius);
  box-shadow: var(--shadow);
  transition: var(--transition);
  text-align: center;
}

.card:hover {
  transform: translateY(-5px);
  box-shadow: var(--shadow-lg);
}

.card-icon {
  width: 60px;
  height: 60px;
  background: var(--primary-color);
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  margin: 0 auto 1rem;
  color: white;
  font-size: 1.5rem;
}

.card h3 {
  font-size: 1.25rem;
  font-weight: bold;
  margin-bottom: 1rem;
  color: var(--text-color);
}

.card p {
  color: var(--text-light);
  margin-bottom: 1.5rem;
}

.card-link {
  color: var(--primary-color);
  text-decoration: none;
  font-weight: 600;
  transition: var(--transition);
}

.card-link:hover {
  color: var(--secondary-color);
}

/* Contact Section */
.contact {
  background: var(--bg-light);
}

.contact-content {
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 3rem;
  margin-top: 3rem;
}

.contact-info h3 {
  font-size: 1.5rem;
  margin-bottom: 1rem;
  color: var(--text-color);
}

.contact-info p {
  margin-bottom: 0.5rem;
  color: var(--text-light);
}

/* Forms */
.contact-form {
  background: var(--bg-color);
  padding: 2rem;
  border-radius: var(--border-radius);
  box-shadow: var(--shadow);
}

.form-group {
  margin-bottom: 1.5rem;
}

.form-group label {
  display: block;
  margin-bottom: 0.5rem;
  font-weight: 600;
  color: var(--text-color);
}

.form-group input,
.form-group textarea {
  width: 100%;
  padding: 0.75rem;
  border: 2px solid var(--border-color);
  border-radius: var(--border-radius);
  font-size: 1rem;
  transition: var(--transition);
}

.form-group input:focus,
.form-group textarea:focus {
  outline: none;
  border-color: var(--primary-color);
}

/* Footer */
.footer {
  background: var(--text-color);
  color: white;
  padding: 3rem 0 1rem;
}

.footer-content {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
  gap: 2rem;
  margin-bottom: 2rem;
}

.footer-section h3,
.footer-section h4 {
  margin-bottom: 1rem;
}

.footer-section ul {
  list-style: none;
}

.footer-section ul li {
  margin-bottom: 0.5rem;
}

.footer-section a {
  color: #d1d5db;
  text-decoration: none;
  transition: var(--transition);
}

.footer-section a:hover {
  color: white;
}

.social-links {
  display: flex;
  gap: 1rem;
}

.footer-bottom {
  text-align: center;
  padding-top: 2rem;
  border-top: 1px solid #374151;
  color: #9ca3af;
}

/* Responsive Design */
@media (max-width: 768px) {
  .nav-list {
    display: none;
    position: absolute;
    top: 100%;
    left: 0;
    right: 0;
    background: var(--bg-color);
    flex-direction: column;
    padding: 1rem;
    box-shadow: var(--shadow);
  }

  .nav-list.active {
    display: flex;
  }

  .nav-toggle {
    display: flex;
  }

  .hero-title {
    font-size: 2.5rem;
  }

  .hero-actions {
    flex-direction: column;
    align-items: center;
  }

  .contact-content {
    grid-template-columns: 1fr;
  }

  .grid {
    grid-template-columns: 1fr;
  }

  .container {
    padding: 0 15px;
  }
}

@media (max-width: 480px) {
  .hero {
    padding: 4rem 0;
  }

  .hero-title {
    font-size: 2rem;
  }

  .section {
    padding: 3rem 0;
  }

  .section-title {
    font-size: 2rem;
  }
}

/* Animations */
@keyframes fadeInUp {
  from {
    opacity: 0;
    transform: translateY(30px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

.animate-fade-in {
  animation: fadeInUp 0.6s ease-out;
}`;
  }

  private generateFallbackHTML(plan: WebPagePlan): string {
    const navigationItems = plan.structure.map(section =>
      `<li><a href="#${section.section.toLowerCase().replace(/\s+/g, '-')}">${section.section}</a></li>`
    ).join('');

    const sectionsHTML = plan.structure.map(section => {
      const sectionId = section.section.toLowerCase().replace(/\s+/g, '-');
      const contentCards = section.content.map(item => `
                    <div class="card">
                        <div class="card-icon">
                            <i class="icon-${item.toLowerCase().replace(/\s+/g, '-')}"></i>
                        </div>
                        <h3>${item}</h3>
                        <p>Descubre todo lo que necesitas saber sobre ${item.toLowerCase()}. Ofrecemos soluciones profesionales y personalizadas para satisfacer tus necesidades espec√≠ficas.</p>
                        <a href="#contacto" class="card-link">M√°s informaci√≥n</a>
                    </div>
      `).join('');

      return `
        <section id="${sectionId}" class="section">
            <div class="container">
                <div class="section-header">
                    <h2 class="section-title">${section.section}</h2>
                    <p class="section-description">${section.description}</p>
                </div>
                <div class="grid">
                    ${contentCards}
                </div>
            </div>
        </section>`;
    }).join('');

    return `<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>${plan.title} | Soluciones Profesionales</title>
    <meta name="description" content="${plan.description}">
    <meta name="keywords" content="${plan.title}, servicios profesionales, soluciones, calidad">
    <meta name="author" content="${plan.title}">
    <meta property="og:title" content="${plan.title}">
    <meta property="og:description" content="${plan.description}">
    <meta property="og:type" content="website">
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    <header class="header">
        <div class="container">
            <div class="header-content">
                <div class="logo">
                    <h1 class="logo-text">${plan.title}</h1>
                </div>
                <nav class="nav">
                    <button class="nav-toggle" aria-label="Abrir men√∫">
                        <span></span>
                        <span></span>
                        <span></span>
                    </button>
                    <ul class="nav-list">
                        <li><a href="#inicio" class="nav-link">Inicio</a></li>
                        ${navigationItems}
                        <li><a href="#contacto" class="nav-link">Contacto</a></li>
                    </ul>
                </nav>
            </div>
        </div>
    </header>

    <main class="main">
        <section id="inicio" class="hero">
            <div class="container">
                <div class="hero-content">
                    <h1 class="hero-title">${plan.title}</h1>
                    <p class="hero-description">${plan.description}</p>
                    <div class="hero-actions">
                        <a href="#${plan.structure[0]?.section.toLowerCase().replace(/\s+/g, '-') || 'servicios'}" class="btn btn-primary">Conocer M√°s</a>
                        <a href="#contacto" class="btn btn-secondary">Contactar</a>
                    </div>
                </div>
            </div>
        </section>

        ${sectionsHTML}

        <section id="contacto" class="contact">
            <div class="container">
                <div class="section-header">
                    <h2 class="section-title">Contacto</h2>
                    <p class="section-description">¬øListo para comenzar? Cont√°ctanos y descubre c√≥mo podemos ayudarte.</p>
                </div>
                <div class="contact-content">
                    <div class="contact-info">
                        <div class="contact-item">
                            <h3>Informaci√≥n de Contacto</h3>
                            <p>üìß info@${plan.title.toLowerCase().replace(/\s+/g, '')}.com</p>
                            <p>üìû +1 (555) 123-4567</p>
                            <p>üìç Ciudad, Pa√≠s</p>
                        </div>
                    </div>
                    <form class="contact-form">
                        <div class="form-group">
                            <label for="name">Nombre completo</label>
                            <input type="text" id="name" name="name" required>
                        </div>
                        <div class="form-group">
                            <label for="email">Correo electr√≥nico</label>
                            <input type="email" id="email" name="email" required>
                        </div>
                        <div class="form-group">
                            <label for="message">Mensaje</label>
                            <textarea id="message" name="message" rows="5" required></textarea>
                        </div>
                        <button type="submit" class="btn btn-primary">Enviar Mensaje</button>
                    </form>
                </div>
            </div>
        </section>
    </main>

    <footer class="footer">
        <div class="container">
            <div class="footer-content">
                <div class="footer-section">
                    <h3>${plan.title}</h3>
                    <p>Comprometidos con la excelencia y la satisfacci√≥n de nuestros clientes.</p>
                </div>
                <div class="footer-section">
                    <h4>Enlaces R√°pidos</h4>
                    <ul>
                        ${navigationItems}
                    </ul>
                </div>
                <div class="footer-section">
                    <h4>S√≠guenos</h4>
                    <div class="social-links">
                        <a href="#" aria-label="Facebook">Facebook</a>
                        <a href="#" aria-label="Twitter">Twitter</a>
                        <a href="#" aria-label="LinkedIn">LinkedIn</a>
                    </div>
                </div>
            </div>
            <div class="footer-bottom">
                <p>&copy; 2024 ${plan.title}. Todos los derechos reservados.</p>
            </div>
        </div>
    </footer>

    <script src="script.js"></script>
</body>
</html>`;
  }

  private generateFallbackJS(plan: WebPagePlan): string {
    return `// Professional JavaScript for ${plan.title}
document.addEventListener('DOMContentLoaded', function() {
    console.log('üöÄ ${plan.title} - P√°gina cargada exitosamente');

    // ===== NAVIGATION SYSTEM =====
    const navToggle = document.querySelector('.nav-toggle');
    const navList = document.querySelector('.nav-list');
    const navLinks = document.querySelectorAll('.nav-link');

    // Mobile menu toggle
    if (navToggle && navList) {
        navToggle.addEventListener('click', function() {
            navList.classList.toggle('active');
            this.classList.toggle('active');
        });

        // Close menu when clicking on a link
        navLinks.forEach(link => {
            link.addEventListener('click', () => {
                navList.classList.remove('active');
                navToggle.classList.remove('active');
            });
        });
    }

    // Smooth scrolling for navigation
    navLinks.forEach(link => {
        link.addEventListener('click', function(e) {
            e.preventDefault();
            const targetId = this.getAttribute('href');
            const targetSection = document.querySelector(targetId);

            if (targetSection) {
                const headerHeight = document.querySelector('.header').offsetHeight;
                const targetPosition = targetSection.offsetTop - headerHeight;

                window.scrollTo({
                    top: targetPosition,
                    behavior: 'smooth'
                });
            }
        });
    });

    // ===== SCROLL ANIMATIONS =====
    const observerOptions = {
        threshold: 0.1,
        rootMargin: '0px 0px -50px 0px'
    };

    const scrollObserver = new IntersectionObserver(function(entries) {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                entry.target.classList.add('animate-fade-in');
                entry.target.style.opacity = '1';
                entry.target.style.transform = 'translateY(0)';
            }
        });
    }, observerOptions);

    // Observe elements for animation
    const animatedElements = document.querySelectorAll('.card, .section-header, .hero-content');
    animatedElements.forEach(el => {
        el.style.opacity = '0';
        el.style.transform = 'translateY(30px)';
        el.style.transition = 'opacity 0.6s ease, transform 0.6s ease';
        scrollObserver.observe(el);
    });

    // ===== INTERACTIVE EFFECTS =====

    // Enhanced button interactions
    const buttons = document.querySelectorAll('.btn');
    buttons.forEach(btn => {
        btn.addEventListener('mouseenter', function() {
            this.style.transform = 'translateY(-3px) scale(1.05)';
            this.style.boxShadow = '0 10px 25px rgba(0,0,0,0.15)';
        });

        btn.addEventListener('mouseleave', function() {
            this.style.transform = 'translateY(0) scale(1)';
            this.style.boxShadow = '';
        });

        btn.addEventListener('mousedown', function() {
            this.style.transform = 'translateY(-1px) scale(1.02)';
        });

        btn.addEventListener('mouseup', function() {
            this.style.transform = 'translateY(-3px) scale(1.05)';
        });
    });

    // Enhanced card interactions
    const cards = document.querySelectorAll('.card');
    cards.forEach(card => {
        card.addEventListener('mouseenter', function() {
            this.style.transform = 'translateY(-8px) scale(1.02)';
            this.style.boxShadow = '0 15px 35px rgba(0,0,0,0.1)';
        });

        card.addEventListener('mouseleave', function() {
            this.style.transform = 'translateY(0) scale(1)';
            this.style.boxShadow = '0 4px 6px -1px rgba(0, 0, 0, 0.1)';
        });
    });

    // ===== FORM HANDLING =====
    const contactForm = document.querySelector('.contact-form');
    if (contactForm) {
        contactForm.addEventListener('submit', function(e) {
            e.preventDefault();

            // Get form data
            const formData = new FormData(this);
            const name = formData.get('name');
            const email = formData.get('email');
            const message = formData.get('message');

            // Basic validation
            if (!name || !email || !message) {
                showNotification('Por favor, completa todos los campos', 'error');
                return;
            }

            if (!isValidEmail(email)) {
                showNotification('Por favor, ingresa un email v√°lido', 'error');
                return;
            }

            // Simulate form submission
            const submitBtn = this.querySelector('button[type="submit"]');
            const originalText = submitBtn.textContent;

            submitBtn.textContent = 'Enviando...';
            submitBtn.disabled = true;

            setTimeout(() => {
                showNotification('¬°Mensaje enviado correctamente! Te contactaremos pronto.', 'success');
                this.reset();
                submitBtn.textContent = originalText;
                submitBtn.disabled = false;
            }, 2000);
        });
    }

    // ===== UTILITY FUNCTIONS =====

    function isValidEmail(email) {
        const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;
        return emailRegex.test(email);
    }

    function showNotification(message, type = 'info') {
        // Remove existing notifications
        const existingNotification = document.querySelector('.notification');
        if (existingNotification) {
            existingNotification.remove();
        }

        // Create notification element
        const notification = document.createElement('div');
        notification.className = \`notification notification-\${type}\`;
        notification.innerHTML = \`
            <div class="notification-content">
                <span class="notification-message">\${message}</span>
                <button class="notification-close">&times;</button>
            </div>
        \`;

        // Add styles
        notification.style.cssText = \`
            position: fixed;
            top: 20px;
            right: 20px;
            background: \${type === 'success' ? '#10b981' : type === 'error' ? '#ef4444' : '#3b82f6'};
            color: white;
            padding: 1rem 1.5rem;
            border-radius: 8px;
            box-shadow: 0 10px 25px rgba(0,0,0,0.1);
            z-index: 10000;
            transform: translateX(100%);
            transition: transform 0.3s ease;
            max-width: 400px;
        \`;

        document.body.appendChild(notification);

        // Animate in
        setTimeout(() => {
            notification.style.transform = 'translateX(0)';
        }, 100);

        // Close button functionality
        const closeBtn = notification.querySelector('.notification-close');
        closeBtn.addEventListener('click', () => {
            notification.style.transform = 'translateX(100%)';
            setTimeout(() => notification.remove(), 300);
        });

        // Auto remove after 5 seconds
        setTimeout(() => {
            if (notification.parentNode) {
                notification.style.transform = 'translateX(100%)';
                setTimeout(() => notification.remove(), 300);
            }
        }, 5000);
    }

    // ===== SCROLL EFFECTS =====

    let lastScrollTop = 0;
    const header = document.querySelector('.header');

    window.addEventListener('scroll', function() {
        const scrollTop = window.pageYOffset || document.documentElement.scrollTop;

        // Header hide/show on scroll
        if (scrollTop > lastScrollTop && scrollTop > 100) {
            header.style.transform = 'translateY(-100%)';
        } else {
            header.style.transform = 'translateY(0)';
        }

        lastScrollTop = scrollTop;
    });

    // ===== LAZY LOADING =====

    const images = document.querySelectorAll('img[data-src]');
    const imageObserver = new IntersectionObserver(function(entries) {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                const img = entry.target;
                img.src = img.dataset.src;
                img.removeAttribute('data-src');
                img.classList.add('loaded');
                imageObserver.unobserve(img);
            }
        });
    });

    images.forEach(img => {
        img.style.opacity = '0';
        img.style.transition = 'opacity 0.3s ease';
        img.addEventListener('load', () => {
            img.style.opacity = '1';
        });
        imageObserver.observe(img);
    });

    // ===== PERFORMANCE OPTIMIZATION =====

    // Debounce function for scroll events
    function debounce(func, wait) {
        let timeout;
        return function executedFunction(...args) {
            const later = () => {
                clearTimeout(timeout);
                func(...args);
            };
            clearTimeout(timeout);
            timeout = setTimeout(later, wait);
        };
    }

    // ===== ACCESSIBILITY ENHANCEMENTS =====

    // Keyboard navigation for mobile menu
    if (navToggle) {
        navToggle.addEventListener('keydown', function(e) {
            if (e.key === 'Enter' || e.key === ' ') {
                e.preventDefault();
                this.click();
            }
        });
    }

    // Focus management for modal-like behaviors
    document.addEventListener('keydown', function(e) {
        if (e.key === 'Escape') {
            // Close mobile menu if open
            if (navList && navList.classList.contains('active')) {
                navList.classList.remove('active');
                navToggle.classList.remove('active');
                navToggle.focus();
            }
        }
    });

    // ===== INITIALIZATION COMPLETE =====
    console.log('‚úÖ Todas las funcionalidades JavaScript cargadas correctamente');
    console.log('üì± Navegaci√≥n m√≥vil:', navToggle ? 'Activada' : 'No requerida');
    console.log('üé® Animaciones:', animatedElements.length, 'elementos animados');
    console.log('üìù Formularios:', contactForm ? 'Configurado' : 'No encontrado');

    // Dispatch custom event to indicate page is fully loaded
    window.dispatchEvent(new CustomEvent('pageFullyLoaded', {
        detail: { title: '${plan.title}', timestamp: new Date() }
    }));
});`;
  }
}
